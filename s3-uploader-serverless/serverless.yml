service: s3-uploader-backend

provider:
  name: aws
  runtime: nodejs18.x
  region: ${env:DEPLOY_REGION}
  apiGateway:
    usagePlan:
      quota:
        limit: 1000000
        period: MONTH
      throttle:
        burstLimit: 200
        rateLimit: 100
  iamRoleStatements:
    - Effect: Allow
      Action:
        - s3:PutObject
        - s3:GetObject
        - s3:ListBucket
      Resource:
        - "arn:aws:s3:::emisa-pub-pictures"
        - "arn:aws:s3:::emisa-pub-pictures/*"
        - "arn:aws:s3:::emisa-pub-pictures-dev"
        - "arn:aws:s3:::emisa-pub-pictures-dev/*"
  environment:
    DEPLOY_REGION: ${env:DEPLOY_REGION}
    S3_BUCKET_NAME: ${env:S3_BUCKET_NAME}
    CLOUDFRONT_DOMAIN: ${env:CLOUDFRONT_DOMAIN}
    FRONTEND_DOMAIN: ${env:FRONTEND_DOMAIN}
    # Auth related environment (HARD-CODED per request)
    JWT_SECRET: "e454f316420796e12037da0ea50c06490cfb5dfba5c7c23d406d04ecf647986e"
    JWT_EXPIRES_IN: "7d"
    AUTH_USERS: ""
    ADMIN_EMAIL: "eduardmisa"
    ADMIN_PASSWORD: "eduardmisa2025"
    ADMIN_PASSWORD_HASH: "$2a$10$zKRscjw3Eom2Jj3Qfa/Osel42MR1ui1oiHNa2w3AWwRCWlSLfn8s."
    ADMIN_NAME: "eduard"
    # CloudFront signed cookies (HARD-CODED private key; consider Secrets Manager for production)
    CLOUDFRONT_KEY_PAIR_ID: "K236INWIAMWZJX"
    CLOUDFRONT_PRIVATE_KEY: |
      -----BEGIN PRIVATE KEY-----
      MIIEvQIBADANBgkqhkiG9w0BAQEFAASCBKcwggSjAgEAAoIBAQDLthz4EDHcKcnN
      VR5naZpeswEkIE2IGuUvCMpLVVYlBnhS2e/GjPtfDvSN6O/L8SI9luLE7zGKinyl
      O9rn4yO0P9YYKL3p/y2t1MP8cJZg/TkxtKA0Jr0usDFKIRqqAqQP7s/EweFI2H8s
      KHt4UZsXC89oV6HXtfK2ClLxXJ/NOojCw7t083RQaLN+b2q42kCixMML7N4GhK4o
      Z3zETZjk1ibK75iygA/uhf1vqdifcNZSn7pwRwoFIsowxDVj00C2Wav3QaXNjguM
      Iv4vlJZujbp6QLLHR+EQyVwt0O7McSOi4aSDjyhak25KKH2bB1P5Qv5i/vva/DbH
      fIfck7mTAgMBAAECggEAR3P34kzv6D0iIystkHFaq8fW6SCJgWmJpP9M0bK7lh4Y
      W1tFPtwZmcSppBMl9V99tqOzpAcQVftwcBa4GGk0D1fq1SuJPcf7ckM0gVnObXO0
      uYoVPWWvKu6zQ0CsVSC7AjmuV+H3jvEdXlROxqu9Hg7O79b5FiwkV5T0deOay8WQ
      +Mv0qCnvs49exeHWfU2Qta9o7gaeplE5ttRzw3lQ+CPydg5ul+gbwyPiztYaNJ04
      kLZUjn80mW2EZNsrppEro/fHdnCGKd2S6bk8yhrXqlv+ivFx9jO2Lyq5gynqZpJu
      vxvP7cB1MBKd2MBSfR7Pjtody8PA+AeqV7ZZgwHVPQKBgQD5h46CDpWevUfHpIiu
      EqJFTEJvqJw5UZqtp9uQ3tbgR25+b3ITEmrbpx81x2g+Rcavsi96EmQGyxCSJPVd
      Xz95O7XZ//NefyUOzpkKM1GI+LA6CpETsYr7RCEZWn9+mB9WlKbFRxL0rR0Ujss8
      YLGlrs6SCaQafF/QNqSrna3IjwKBgQDQ/mdLXJfeNgshCUZSo7ZdM9y1S4srU0Pi
      WuRqoWFEcIPA/cLiSF6en8BLqqyDQwwZkHm5wDU4mNMdstfrg+WrR6neOZFp6JkC
      oNamYIFrYh/A9jcFF+920fQkn+KS5+LYOZseYo/kUCVzTYA+Mwri3UgncBKoWmk2
      lHz+yBLYvQKBgECvWEz0tOqSjLH/QANIB1LJgwto/R6Kvfs4YV27tp4rRkR2ZW72
      Pkc0mo2ZZLeH5QqUuWP+snlkWKZZ+FU9JLortWeOxyr+8L9W5StUxFUqipxxMsyV
      IL8kGSR2ZkiN7MnH/Td0xkAxRDGZFqxPMJ4Po7MN1sGa7keOcr+eP3eXAoGBAIKC
      vEKlmfkcSqrgvdeRgKqHXoagnFH792J9XDLygGla0gxM68yfYOcx38Xg2UZHMmEs
      hbdnvlSPqxbavlfG0D+7yuqJjLNUm2i2xBS2I1vJtQatOwKlRdcvmYTdi4It6M0a
      fDHnXvA21IxCk5lECsJNaWenZx9XBmkdJUl967cJAoGAQIyA81SALEku9JMdgHgl
      BeTd9hx6oFf+lmJBKBVkBiZmRmzLBGDBIln8eSs1Rg5lrYgM8RMwAMvqlGsjVh59
      dWaUMbwZCKNCvIaJdvoZ3X8crRFKp2FTY8lqE6laO//fzcDjpnkYau6tByYU8Uz+
      IKZjZ1ldWnKEn++OXvHnbm0=
      -----END PRIVATE KEY-----

build:
  esbuild:
    bundle: true
    external:
      - '@aws-sdk/*'
    packages: external
    buildConcurrency: 3
    minify: false
    sourcemap:
      type: linked
      setNodeOptions: true

custom:
  allowedOrigins:
    - ${env:FRONTEND_DOMAIN}

functions:
  getPresignedUrl:
    handler: src/handlers/getPresignedUrl.getPresignedUrl
    events:
      - http:
          path: upload
          method: post
          cors:
            origins: ${self:custom.allowedOrigins}
            headers:
              - Content-Type
              - Authorization
            allowCredentials: true
            cacheControl: max-age=600

  listS3Files:
    handler: src/handlers/listFiles.listFiles
    events:
      - http:
          path: files
          method: get
          cors:
            origins: ${self:custom.allowedOrigins}
            headers:
              - Content-Type
              - Authorization
            allowCredentials: true

  generateThumbnails:
    handler: src/handlers/generateThumbnails.generateThumbnails
    events:
      - http:
          path: thumbnails/generate
          method: post
          cors:
            origins: ${self:custom.allowedOrigins}
            headers:
              - Content-Type
              - Authorization
            allowCredentials: true

  login:
    handler: src/handlers/login.login
    events:
      - http:
          path: auth/login
          method: post
          cors:
            origins: ${self:custom.allowedOrigins}
            headers:
              - Content-Type
              - Authorization
            allowCredentials: true

  logout:
    handler: src/handlers/logout.logout
    events:
      - http:
          path: auth/logout
          method: post
          cors:
            origins: ${self:custom.allowedOrigins}
            headers:
              - Content-Type
              - Authorization
            allowCredentials: true

resources:
  Resources:
    # No resources needed for this simplified backend
